// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    budgets       BudgetUser[]
    goals         Goal[]
    transactions  Transaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Budget {
    id          String   @id @default(cuid())
    name        String
    amount      Float?

    users       BudgetUser[]
    categories  Category[]
    transactions Transaction[]
}

model BudgetUser {
    user      User   @relation(fields: [userId], references: [id])
    userId    String

    budget    Budget @relation(fields: [budgetId], references: [id])
    budgetId  String


    @@id([userId, budgetId])
}

model Category {
  id          String        @id @default(cuid())
  name        String
  limit       Float
  budgetId    String

  budget      Budget        @relation(fields: [budgetId], references: [id])
  transactions  Transaction[]
}

model Goal {
  id            String   @id @default(cuid())
  name          String
  targetAmount  Float
  currentAmount Float
  targetDate    DateTime
  userId        String

  user      User   @relation(fields: [userId], references: [id])
}

model Transaction {
  id          String           @id @default(cuid())
  amount      Float
  date        DateTime         @default(now())
  description String?
  type        TransactionType

  categoryId  String
  budgetId    String
  userId      String

  budget      Budget           @relation(fields: [budgetId], references: [id])
  user        User             @relation(fields: [userId], references: [id])
  category    Category         @relation(fields: [categoryId], references: [id])
}

enum TransactionType {
  INCOME
  EXPENSE
}
