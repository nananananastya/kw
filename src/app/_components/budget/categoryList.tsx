import React, { useState } from 'react';
import { api } from '~/trpc/react';
import { Category } from '@prisma/client';
import ItemList from './itemList';
import { GoPlus } from 'react-icons/go';
import EditCategoryModal from './editCategory'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

type CategoryListProps = {
  budgetId: string;
  setAddCategoryModalOpen: React.Dispatch<React.SetStateAction<boolean>>;
};

const CategoryList: React.FC<CategoryListProps> = ({ budgetId, setAddCategoryModalOpen }) => {
  const { data: categories = [], isLoading, error } = api.budget.getCategoriesForBudget.useQuery(budgetId);
  
  const [isEditModalOpen, setIsEditModalOpen] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [categoryToEdit, setCategoryToEdit] = useState<Category | null>(null); // –î–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  const utils = api.useUtils();

  const deleteCategory = api.budget.deleteCategory.useMutation({
    onSuccess: () => {
      utils.budget.getCategoriesForBudget.invalidate(budgetId); // –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
      setIsEditModalOpen(false); // –∑–∞–∫—Ä–æ–µ–º –º–æ–¥–∞–ª–∫—É
    },
  });

  if (isLoading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...</div>;
  if (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", error);
    return <div>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</div>;
  }

  const handleCategoryClick = (category: Category) => {
    setCategoryToEdit(category); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    setIsEditModalOpen(true); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  };

  const handleSaveCategory = (id: string, name: string, limit: number) => {
    // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API)
    console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:", id, name, limit);
    // –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à –∏ –ø–µ—Ä–µ–∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    setIsEditModalOpen(false); // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏
  };

  const handleDeleteCategory = (id: string) => {
    if (confirm("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é?")) {
      deleteCategory.mutate({id});
    }
  };
  

  return (
    <div className="mt-6">
      <ItemList<Category>
        items={categories}
        keyExtractor={(category) => category.id}
        title={
          <div className="flex items-center justify-between">
            <h2 className="text-xl font-semibold text-gray-700 mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±—é–¥–∂–µ—Ç–∞</h2>
            <button
              onClick={() => setAddCategoryModalOpen(true)} // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              className="p-2 rounded-full bg-gray-100 hover:bg-gray-200 transition"
              title="–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
            >
              <GoPlus className="w-5 h-5 text-gray-700" />
            </button>
          </div>
        }
        renderItem={(category) => (
          <div
            className="flex items-center justify-between py-2 border-b border-gray-200 cursor-pointer"
            onClick={() => handleCategoryClick(category)}
          >
            <div>
              <p className="text-gray-700">{category.name}</p>
              <p className="text-sm text-gray-500">
                –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ‚ÇΩ{1000}
              </p>
            </div>
            <div className="w-24 h-4 bg-gray-200 rounded-full overflow-hidden">
              <div
                className="h-full bg-pink-500"
                style={{
                  width: `30%`,
                }}
              />
            </div>
          </div>
        )}
      />
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {categoryToEdit && (
        <EditCategoryModal
          isOpen={isEditModalOpen}
          onClose={() => setIsEditModalOpen(false)}
          category={categoryToEdit}
          onSave={handleSaveCategory}
          onDelete={handleDeleteCategory} // üëà –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–õ–û
        />
      )}
    </div>
  );
};

export default CategoryList;
